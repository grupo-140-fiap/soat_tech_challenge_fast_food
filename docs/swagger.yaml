definitions:
  dto.CreateCustomerRequest:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      email:
        example: joao.silva@email.com
        type: string
      first_name:
        example: João
        type: string
      last_name:
        example: Silva
        type: string
    required:
    - cpf
    - email
    - first_name
    - last_name
    type: object
  dto.CreateOrderRequest:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      customer_id:
        example: 123
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.OrderItemRequest'
        type: array
    required:
    - items
    type: object
  dto.CreateProductRequest:
    properties:
      category:
        example: snack
        type: string
      description:
        example: Delicious cheeseburger with cheddar and pickles
        type: string
      image_url:
        example: https://example.com/images/cheeseburger.png
        type: string
      name:
        example: Cheeseburger
        type: string
      price:
        example: 12.99
        type: number
    required:
    - category
    - description
    - name
    - price
    type: object
  dto.OrderItemRequest:
    properties:
      product_id:
        example: 200
        type: integer
      quantity:
        example: 2
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.UpdateCustomerRequest:
    properties:
      email:
        example: joao.silva@email.com
        type: string
      first_name:
        example: João
        type: string
      last_name:
        example: Silva
        type: string
    required:
    - email
    - first_name
    - last_name
    type: object
  dto.UpdateOrderStatusRequest:
    properties:
      status:
        example: in_progress
        type: string
    required:
    - status
    type: object
  dto.UpdateProductRequest:
    properties:
      category:
        example: snack
        type: string
      description:
        example: Delicious cheeseburger with cheddar and pickles
        type: string
      image_url:
        example: https://example.com/images/cheeseburger.png
        type: string
      name:
        example: Cheeseburger
        type: string
      price:
        example: 12.99
        type: number
    required:
    - category
    - description
    - name
    - price
    type: object
info:
  contact: {}
paths:
  /customers:
    post:
      consumes:
      - application/json
      description: Create new customer
      parameters:
      - description: customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create new customer
      tags:
      - customers
  /customers/{cpf}:
    get:
      description: Get customer by CPF
      parameters:
      - description: Customer CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get customer by CPF
      tags:
      - customers
  /customers/{id}:
    delete:
      description: Delete customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update customer information
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update customer
      tags:
      - customers
  /customers/id/{id}:
    get:
      description: Get customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get customer by ID
      tags:
      - customers
  /orders:
    get:
      description: Get all orders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create new order with items
      parameters:
      - description: order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create new order
      tags:
      - orders
  /orders/{id}:
    delete:
      description: Delete order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete order
      tags:
      - orders
    get:
      description: Get order by ID with items
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get order by ID
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update order status
      tags:
      - orders
  /orders/cpf/{cpf}:
    get:
      description: Get all orders for a specific CPF
      parameters:
      - description: Customer CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get orders by CPF
      tags:
      - orders
  /orders/customer/{customerId}:
    get:
      description: Get all orders for a specific customer ID
      parameters:
      - description: Customer ID
        in: path
        name: customerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get orders by customer ID
      tags:
      - orders
  /orders/kitchen:
    get:
      description: Get orders for kitchen with priority ordering (Ready > In Progress
        > Received) and oldest first. Completed orders are excluded.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get orders for kitchen
      tags:
      - orders
  /products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create new product
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete product
      tags:
      - products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update product information
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update product
      tags:
      - products
  /products/category/{category}:
    get:
      description: Get products by category (snack, drink, dessert, side)
      parameters:
      - description: Product Category
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get products by category
      tags:
      - products
swagger: "2.0"
