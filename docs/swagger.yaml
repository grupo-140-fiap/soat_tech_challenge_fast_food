basePath: /api/v1
definitions:
  dto.CreateCustomerDTO:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      email:
        example: joao.silva@email.com
        type: string
      first_name:
        example: João
        type: string
      last_name:
        example: Silva
        type: string
    type: object
  dto.OrderDTO:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      customer_id:
        example: 123
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.OrderItemDTO'
        type: array
    type: object
  dto.OrderItemDTO:
    properties:
      product_id:
        example: 1
        type: integer
      quantity:
        example: 2
        type: integer
    type: object
  dto.PaymentDTO:
    properties:
      QrcodeUrl:
        type: string
      amount:
        type: string
      cpf:
        type: string
      email:
        type: string
    type: object
  dto.ProductDTO:
    properties:
      category:
        example: snack
        type: string
      description:
        example: Delicioso cheeseburger com queijo cheddar e molho especial
        type: string
      image_url:
        example: https://example.com/images/cheeseburger.png
        type: string
      name:
        example: Cheeseburger
        type: string
      price:
        example: "19.90"
        type: string
    type: object
  entities.Customer:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      created_at:
        example: "2024-06-01T12:00:00Z"
        type: string
      email:
        example: joao.silva@email.com
        type: string
      first_name:
        example: João
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Silva
        type: string
      updated_at:
        example: "2024-06-02T15:30:00Z"
        type: string
    type: object
  entities.Order:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      created_at:
        example: "2024-06-01T12:00:00Z"
        type: string
      customer_id:
        example: 123
        type: integer
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/entities.OrderItem'
        type: array
      status:
        example: received
        type: string
      updated_at:
        example: "2024-06-01T12:30:00Z"
        type: string
    type: object
  entities.OrderItem:
    properties:
      created_at:
        example: "2024-06-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      order_id:
        example: 100
        type: integer
      price:
        example: 19.99
        type: number
      product_id:
        example: 200
        type: integer
      quantity:
        example: 2
        type: integer
      updated_at:
        example: "2024-06-01T12:30:00Z"
        type: string
    type: object
  entities.Product:
    properties:
      category:
        example: snack
        type: string
      created_at:
        example: "2024-06-01T12:00:00Z"
        type: string
      description:
        example: Delicious cheeseburger with cheddar and pickles
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: https://example.com/images/cheeseburger.png
        type: string
      name:
        example: Cheeseburger
        type: string
      price:
        example: 12.99
        type: number
      updated_at:
        example: "2024-06-01T12:00:00Z"
        type: string
    type: object
  handlers.RequestBody:
    properties:
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API para gerenciamento de pedidos e produtos de lanchonete do SOAT
    Tech Challenge.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: SOAT Tech Challenge Fast Food API
  version: "1.0"
paths:
  /admin/orders/active:
    get:
      consumes:
      - application/json
      description: Retrieve all active orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Order'
            type: array
      summary: Get active orders
      tags:
      - admin
  /customers:
    post:
      consumes:
      - application/json
      description: Create new customer
      parameters:
      - description: customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create new customer
      tags:
      - customers
  /customers/{cpf}:
    get:
      description: Retrieves a customer by their CPF (Cadastro de Pessoas Físicas).
      parameters:
      - description: Customer CPF
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Customer'
      summary: Get customer by CPF
      tags:
      - customers
  /orders:
    get:
      description: Retrieves a list of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Order'
            type: array
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Creates a new order using the provided JSON payload
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.OrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create order
          schema:
            additionalProperties: true
            type: object
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Retrieves an order by its unique identifier
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
        "500":
          description: Failed on find order
          schema:
            additionalProperties: true
            type: object
      summary: Get order by ID
      tags:
      - orders
  /orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handlers.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed on update order status
          schema:
            additionalProperties: true
            type: object
      summary: Update order status
      tags:
      - orders
  /payments:
    post:
      consumes:
      - application/json
      description: Create a new payment using MercadoPago integration
      parameters:
      - description: Payment data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/dto.PaymentDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              Qrcode:
                type: string
              message:
                type: string
            type: object
      summary: Create a new payment
      tags:
      - payment
  /products:
    post:
      consumes:
      - application/json
      description: Creates a new product using the provided JSON payload
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Product created successfully
          schema:
            additionalProperties: true
            type: object
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product from the database using its unique identifier.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Product deleted successfully
          schema:
            additionalProperties: true
            type: object
      summary: Delete a product by ID
      tags:
      - products
    get:
      description: Retrieves a product by its unique identifier.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates the details of an existing product based on the provided
        JSON payload.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing product
      tags:
      - products
  /products/category/{category}:
    get:
      description: Retrieves a list of products filtered by the specified category.
      parameters:
      - description: Product Category
        in: path
        name: category
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Product'
            type: array
      summary: Get products by category
      tags:
      - products
swagger: "2.0"
