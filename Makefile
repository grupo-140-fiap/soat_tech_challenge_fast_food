# Makefile para Fast Food API

.PHONY: help build docker-build docker-run k8s-deploy k8s-delete k8s-status test clean

# Vari√°veis
APP_NAME=fast-food-api
DOCKER_IMAGE=$(APP_NAME):latest
NAMESPACE=fast-food

help: ## Mostra este help
	@echo "Fast Food API - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

build: ## Compila a aplica√ß√£o Go
	@echo "üî® Compilando aplica√ß√£o..."
	go mod tidy
	go build -o bin/$(APP_NAME) cmd/server/main.go

docker-build: ## Constr√≥i a imagem Docker
	@echo "üê≥ Construindo imagem Docker..."
	docker build -t $(DOCKER_IMAGE) .

docker-run: ## Executa com Docker Compose
	@echo "üöÄ Iniciando aplica√ß√£o com Docker Compose..."
	docker compose up --build -d
	@echo "‚úÖ Aplica√ß√£o dispon√≠vel em: http://localhost:8080"
	@echo "üìö Swagger dispon√≠vel em: http://localhost:8080/swagger/index.html"

docker-stop: ## Para containers Docker Compose
	@echo "üõë Parando containers..."
	docker compose down

helm-deploy: docker-build ## Deploy com Helm
	@echo "üöÄ Fazendo deploy com Helm..."
	helm upgrade --install $(APP_NAME) ./helm/fast-food --create-namespace
	@echo "‚è≥ Aguardando pods ficarem prontos..."
	kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=fast-food -n $(NAMESPACE) --timeout=300s
	@echo "‚úÖ Deploy conclu√≠do!"

helm-delete: ## Remove release Helm
	@echo "üóëÔ∏è Removendo release Helm..."
	helm uninstall $(APP_NAME) --namespace $(NAMESPACE) || true
	kubectl delete namespace $(NAMESPACE) --ignore-not-found=true

helm-status: ## Verifica status do release Helm
	@echo "üìä Status do release Helm:"
	@echo ""
	@echo "üè∑Ô∏è Release:"
	helm status $(APP_NAME) -n $(NAMESPACE) 2>/dev/null || echo "Release n√£o encontrado"
	@echo ""
	@echo "üöÄ Pods:"
	kubectl get pods -l app.kubernetes.io/instance=$(APP_NAME) -n $(NAMESPACE) 2>/dev/null || echo "Nenhum pod encontrado"
	@echo ""
	@echo "üåê Services:"
	kubectl get svc -l app.kubernetes.io/instance=$(APP_NAME) -n $(NAMESPACE) 2>/dev/null || echo "Nenhum service encontrado"
	@echo ""
	@echo "üìà HPA:"
	kubectl get hpa -l app.kubernetes.io/instance=$(APP_NAME) -n $(NAMESPACE) 2>/dev/null || echo "HPA n√£o encontrado"

helm-logs: ## Mostra logs da aplica√ß√£o
	@echo "üìã Logs da aplica√ß√£o:"
	kubectl logs -f deployment/$(APP_NAME) -n $(NAMESPACE)

helm-port-forward: ## Cria port-forward para acessar a aplica√ß√£o
	@echo "üîå Criando port-forward para localhost:8080..."
	kubectl port-forward svc/$(APP_NAME) 8080:80 -n $(NAMESPACE)

helm-template: ## Mostra templates gerados pelo Helm
	@echo "üîç Templates Helm gerados:"
	helm template $(APP_NAME) ./helm/fast-food

helm-lint: ## Valida sintaxe do Helm chart
	@echo "üîç Validando Helm chart..."
	helm lint ./helm/fast-food

# Aliases para compatibilidade
k8s-deploy: helm-deploy ## Alias para helm-deploy
k8s-delete: helm-delete ## Alias para helm-delete  
k8s-status: helm-status ## Alias para helm-status
k8s-logs: helm-logs ## Alias para helm-logs
k8s-port-forward: helm-port-forward ## Alias para helm-port-forward

test: ## Executa testes
	@echo "üß™ Executando testes..."
	go test ./... -v

swagger-gen: ## Gera documenta√ß√£o Swagger
	@echo "üìö Gerando documenta√ß√£o Swagger..."
	swag init -g cmd/server/main.go -o docs/

clean: ## Limpa arquivos de build
	@echo "üßπ Limpando arquivos..."
	rm -rf bin/
	docker system prune -f

dev: ## Executa em modo desenvolvimento
	@echo "üîß Iniciando em modo desenvolvimento..."
	go run cmd/server/main.go

# Comandos de ambiente local
env-setup: ## Configura ambiente local
	@echo "‚öôÔ∏è Configurando ambiente..."
	cp .env.example .env 2>/dev/null || echo "Arquivo .env.example n√£o encontrado"
	@echo "üîë Edite o arquivo .env com suas configura√ß√µes"

# Comandos de produ√ß√£o
prod-deploy: helm-deploy ## Deploy para produ√ß√£o
	@echo "üè≠ Deploy de produ√ß√£o conclu√≠do"

prod-status: helm-status ## Status da produ√ß√£o
	@echo "üè≠ Status da produ√ß√£o"

# Comandos utilit√°rios
get-service-url: ## Obt√©m URL de acesso ao servi√ßo
	@echo "üåê URLs de acesso:"
	@kubectl get svc $(APP_NAME) -n $(NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null && echo "" || echo "LoadBalancer n√£o dispon√≠vel"
	@echo "üí° Use 'make helm-port-forward' para acesso local"

helm-upgrade: ## Upgrade do release Helm
	@echo "‚¨ÜÔ∏è Fazendo upgrade do release..."
	helm upgrade $(APP_NAME) ./helm/fast-food -n $(NAMESPACE)

helm-rollback: ## Rollback do release Helm
	@echo "‚¨ÖÔ∏è Fazendo rollback do release..."
	helm rollback $(APP_NAME) -n $(NAMESPACE)